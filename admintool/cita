#!/bin/bash
# 1) source env.sh
# 2) cita --setup
# 3) cita --start
# 4) cita --status|--chain|--consensus
# 5) cita --stop
bins="network chain consensus_tendermint jsonrpc"
log_dir="$(pwd)/log"

function cita_setup() {
    mkdir -p ${log_dir}

    node=node$1
    echo "setup ${node}"
    echo "WARN: This command will clean date of this node!!!"

    # rabbitmq
    sudo rabbitmqctl add_vhost ${node}
    sudo rabbitmqctl set_permissions -p ${node} guest ".*" ".*" ".*"
    sudo rabbitmqctl list_permissions -p ${node}

    # clean up database and local data
    rm -rf ./data
}

function cita_start() {
    node=node$1
    if [ ! -n "$2" ]; then
        echo "starting ${node}"
        nohup bin/auth			                             >${log_dir}/${node}.auth       2>&1 &
        echo $! >> .pid
        nohup bin/network			    -c network.toml	     >${log_dir}/${node}.network    2>&1 &
        echo $! >> .pid
        nohup bin/consensus_tendermint	-c consensus.json	 >${log_dir}/${node}.consensus  2>&1 &
        echo $! >> .pid
        nohup bin/jsonrpc               -c jsonrpc.json	     >${log_dir}/${node}.jsonrpc    2>&1 &
        echo $! >> .pid
        nohup bin/chain					-c genesis.json		 >${log_dir}/${node}.chain	    2>&1 &
        echo $! >> .pid
    else
        echo "starting ${node} debug"
        RUST_LOG=auth=trace    nohup bin/auth			                 >${log_dir}/${node}.auth       2>&1 &
        echo $! >> .pid
        RUST_LOG=network=trace nohup bin/network -c network.toml	     >${log_dir}/${node}.network    2>&1 &
        echo $! >> .pid
        RUST_LOG=consensus_tendermint,proof,txpool,engine=trace nohup bin/consensus_tendermint	-c consensus.json	 >${log_dir}/${node}.consensus  2>&1 &
        echo $! >> .pid
        RUST_LOG=jsonrpc,jsonrpc_types,transaction=trace nohup bin/jsonrpc -c jsonrpc.json	 >${log_dir}/${node}.jsonrpc    2>&1 &
        echo $! >> .pid
        RUST_LOG=chain,core,transaction=trace nohup bin/chain	-c genesis.json		 >${log_dir}/${node}.chain	    2>&1 &
        echo $! >> .pid
    fi
    cita_status $1
}

function cita_stop(){
    for pid in $(cat .pid)
    do
        kill -9 ${pid}
    done
    rm -f .pid
    touch .pid
    cita_status $1
}

function cita_restart() {
	cita_setup $1
	cita_stop $1
	cita_start $1
}

function cita_status(){
    for pid in $(cat .pid)
    do
        ps -A -o command:50,pid,time|grep ${pid} |grep -v "grep"
    done
}

function cita_chain() {
    node=node$1
	tail -100f ${log_dir}/${node}.chain
}
function cita_consensus() {
    node=node$1
	tail -100f ${log_dir}/${node}.consensus
}

function cita_jsonrpc() {
    node=node$1
	tail -100f ${log_dir}/${node}.jsonrpc
}

function cita_network() {
    node=node$1
	tail -100f ${log_dir}/${node}.network
}

function cita_clean(){
    node=node$1
    rm -rf ${log_dir}/${node}.chain ${log_dir}/${node}.consensus ${log_dir}/${node}.network ${log_dir}/${node}.jsonrpc
}

function cita_stat(){
    stat_cmd="pidstat -r -u -d"
    for pid in $(cat .pid)
    do
        stat_cmd=$stat_cmd" -p ${pid}"
    done
    while :
    do
        $stat_cmd
        echo
        echo "disk usage bytes $(du -s ./data)"
        sleep 3
    done
}

function cita_help(){
    echo
    echo "      usage:      cita command nodeid"
    echo
    echo "      command description:"
    echo
    echo "      setup            setup cita run environment"
    echo
    echo "      start            start cita"
    echo
    echo "      stop             stop cita"
    echo
    echo "      restart          restart cita"
    echo
    echo "      status           display cita run status"
    echo
    echo "      jsonrpc          display cita's jsonrpc log information"
    echo
    echo "      chain            display cita's chain log information"
    echo
    echo "      consensus        display cita's consensus log information"
    echo
    echo "      network          display cita's network log information"
    echo
    echo "      clean            clean cita log file"
    echo
    echo "      version          display cita version"
    echo
    echo "      stat             display cita's cpu/ram/io/disk information"
    echo
    echo "      help             display help information"
    echo
    echo
}

SCRIPT_PATH=$(cd `dirname $0`; pwd)

if [ $# -gt 3 ];
then
    cita_help
else
    pushd $SCRIPT_PATH > /dev/null
    case $1 in
        setup) cita_setup $2;;
        start) cita_start $2 $3;;
        stop) cita_stop $2;;
        restart) cita_restart $2;;
        status) cita_status $2;;
        jsonrpc) cita_jsonrpc $2;;
        chain) cita_chain $2;;
        consensus) cita_consensus $2;;
        clean) cita_clean $2;;
        network) cita_network $2;;
        version) echo "0.9";;
        stat) cita_stat $2;;
        help) cita_help ;;
        *) cita_help;;
    esac
    popd > /dev/null
fi
